generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid()) // <- default cuid untuk fallback (bisa di override nanoid)
  name      String
  email     String    @unique
  password  String
  role      String    @default("customer")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  bookings  Booking[]
}

model Table {
  id        String    @id @default(cuid())
  tableNum  Int       @unique
  status    String    @default("available")
  capacity  Int
  qrCodeUrl String
  orders    Order[]
  bookings  Booking[]
}

model Menu {
  id          String      @id @default(cuid())
  name        String
  price       Float
  description String?
  imageUrl    String?
  available   Boolean     @default(true)
  orderItems  OrderItem[]
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  tableId       String
  totalPrice    Float
  status        String      @default("pending")
  paymentStatus String      @default("unpaid")
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  table         Table       @relation(fields: [tableId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id      String   @id @default(cuid())
  orderId String
  menuId  String
  qty     Int
  notes   String?
  order   Order    @relation(fields: [orderId], references: [id])
  menu    Menu     @relation(fields: [menuId], references: [id])
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  tableId     String
  bookingTime DateTime
  status      String   @default("booked")
  user        User     @relation(fields: [userId], references: [id])
  table       Table    @relation(fields: [tableId], references: [id])
}
